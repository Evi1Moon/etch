
// This file automatically generated by:
//   Apache Etch 1.3.0-incubating (LOCAL-0) / c 1.3.0-incubating (LOCAL-0)
//   Fri Jul 27 11:35:36 CEST 2012
// This file is automatically created for your convenience and will not be
// overwritten once it exists! Please edit this file as necessary to implement
// your service logic.

#include "capu/os/Thread.h"
#include "common/EtchTypes.h"
#include "support/EtchRuntime.h"
#include "RemoteHelloWorldClient.h"
#include "MainHelloWorldListener.h"
#include "ImplHelloWorldServer.h"
#include "transport/EtchTransportData.h"
#include "util/EtchLogger.h"



using namespace org_apache_etch_examples_helloworld_HelloWorld;

HelloWorldServer* MainHelloWorldListener::newHelloWorldServer(RemoteHelloWorldClient* client)
{
  return new ImplHelloWorldServer(client);
}

/**
 * Main program for HelloWorldServer.
 *
 * @param args command line arguments.
 * @throws Exception
 */
int main(int argc, const char* argv[])
{
  status_t status;
  EtchRuntime* runtime = new EtchRuntime();
  status = runtime->start();

  EtchLogger* logger = new EtchLogger();
  EtchAppender* appender = new EtchConsoleAppender();
  appender->setLoggingLevel(capu::CLL_TRACE);
  logger->setAppender(appender);
  EtchRuntime::setLogger(logger);


  // TODO Change to correct URI
  EtchString uri("tcp://0.0.0.0:4001");

  MainHelloWorldListener mainHelloWorldlistener;

  EtchServerFactory *listener;
  status = HelloWorldHelper::newListener(runtime, uri, NULL, &mainHelloWorldlistener, listener);


  // Start the Listener
  status = listener->transportControl(new EtchString(EtchTransportData::START_AND_WAIT_UP()), new EtchInt32(4000));

  //Wait for finish...
  capu::Thread::Sleep(200000);

  //Stop the Listener
  listener->transportControl(new EtchString(EtchTransportData::STOP_AND_WAIT_DOWN()), new EtchInt32(4000));

  //delete runtime
  status = runtime->shutdown();

  delete runtime;
  delete logger;
  delete appender;
  return 0;
}

